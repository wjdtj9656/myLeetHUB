var solveSudoku = function(board) {
      const rows = new Array(9).fill(0), cols = new Array(9).fill(0), boxes = new Array(9).fill(0);
        const empties = [];
          for (let r = 0; r < 9; r++) {
              for (let c = 0; c < 9; c++) {
                    const ch = board[r][c];
                          if (ch === '.') empties.push([r, c]);
                                else {
                                        const d = ch.charCodeAt(0) - 48, b = ((r / 3) | 0) * 3 + ((c / 3) | 0), bit = 1 << (d - 1);
                                                rows[r] |= bit; cols[c] |= bit; boxes[b] |= bit;
                                                      }
                                                          }
                                                            }
                                                              function dfs(i) {
                                                                  if (i === empties.length) return true;
                                                                      let [r, c] = empties[i], b = ((r / 3) | 0) * 3 + ((c / 3) | 0);
                                                                          let mask = ~(rows[r] | cols[c] | boxes[b]) & 0x1FF;
                                                                              for (let d = 1; d <= 9; d++) {
                                                                                    let bit = 1 << (d - 1);
                                                                                          if (mask & bit) {
                                                                                                  board[r][c] = String(d);
                                                                                                          rows[r] |= bit; cols[c] |= bit; boxes[b] |= bit;
                                                                                                                  if (dfs(i + 1)) return true;
                                                                                                                          rows[r] ^= bit; cols[c] ^= bit; boxes[b] ^= bit;
                                                                                                                                  board[r][c] = '.';
                                                                                                                                        }
                                                                                                                                            }
                                                                                                                                                return false;
                                                                                                                                                  }
                                                                                                                                                    dfs(0);
                                                                                                                                                    };