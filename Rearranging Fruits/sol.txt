class Solution {
    public long minCost(int[] basket1, int[] basket2) {
        Map<Integer,Integer> hm = new HashMap<>();
        for(int num : basket1){
            hm.put(num,hm.getOrDefault(num,0) + 1);
        }
        for(int num : basket2){
            hm.put(num,hm.getOrDefault(num,0)+1);
        }
        for(int count : hm.values()){
            if(count % 2 != 0) return -1;
        }
        Map<Integer, Integer> stand = new HashMap<>();
        for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {
            stand.put(entry.getKey(), entry.getValue() / 2);
        }
        List<Integer> toSwap1 = new ArrayList<>();
        List<Integer> toSwap2 = new ArrayList<>();
        Map<Integer, Integer> count1 = new HashMap<>();
        for (int num : basket1) {
            count1.put(num, count1.getOrDefault(num, 0) + 1);
            if (count1.get(num) > stand.get(num)) {
                toSwap1.add(num);
            }
        }
        Map<Integer, Integer> count2 = new HashMap<>();
        for(int num : basket2){
            count2.put(num, count2.getOrDefault(num,0)+1);
            if(count2.get(num) > stand.get(num)){
                toSwap2.add(num);
            }
        }
        Collections.sort(toSwap1);
        toSwap2.sort(Collections.reverseOrder());
        int min = 9999999;
        for(int num : basket1){
            min = Math.min(num,min);
        }
        for(int num : basket2){
            min = Math.min(num,min);
        }
        long answer = 0;
        for(int i=0; i<toSwap1.size(); i++){
            answer += Math.min(Math.min(toSwap1.get(i), toSwap2.get(i)),2*min);
        }
        return answer;
    }
}